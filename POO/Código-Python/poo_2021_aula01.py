# -*- coding: utf-8 -*-
"""poo-2021-aula01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L8ewOP8W6TQkNbpb12J_Dk_h_87Nqia_

## POO com Python - Aula 01 e 02
"""

a = 'F'
print(a)
print(type(a))

a = 2
print(a)
print(type(a))

print(a)

class Porta:
  # atributo da classe
  cor = 'preto'

  # construtor
  def __init__(self, status, numero):
    # atributos da instância/objeto
    self.status = status
    self.numero = numero
  
  def abrir(self):
    self.status = 'aberta'

  def fechar(self):
    self.status = 'fechada'

p1 = Porta('fechada', 1000)
print(p1.status + " - " + str(p1.numero) + " - " + p1.cor)

p2 = Porta('aberta', 1001)
print(p2.status + " - " + str(p2.numero) + " - " + p2.cor)

Porta.cor = 'amarelo'

print(p1.status + " - " + str(p1.numero) + " - " + p1.cor)
print(p2.status + " - " + str(p2.numero) + " - " + p2.cor)

print(p1.__dict__)
print(p2.__dict__)

Porta.__dict__

p1.cor = 'roxa'

print(p1.__dict__)
print(p2.__dict__)

Porta.__dict__

p1.fechadura = 'metal'

print(p1.__dict__)
print(p2.__dict__)

Porta.__dict__

print(p1.cor)
print(p2.cor)

print(p1.fechadura)
#print(p2.fechadura) --> AttributeError

class Porta:
  # atributo da classe
  cor = 'preto'

  # construtor
  def __init__(self, status, numero):
    # atributos da instância/objeto
    self.status = status
    self.numero = numero

  # cls faz referência à classe
  @classmethod
  def knock(cls):
    print("Knock knock!")

  @classmethod
  def pintar(cls, cor):
    cls.cor = cor
  
  def abrir(self):
    self.status = 'aberta'

  def fechar(self):
    self.status = 'fechada'

Porta.knock()

Porta.__dict__

Porta.pintar('vermelho')

Porta.__dict__

p10 = Porta('Fechada', 1000)

p10.abrir()

print(p10.status)

"""## Exercício

Criar um classe chamada `Carro` com os seguintes atributos: `modelo`, `cor`, `ano`, `preco` e `total_carros` (o último deve ser um atributo de classe)

Crie os métodos `set`s e `get`s para cada atributo, um construtor, um método `imprimir_carro` e um método `imprimir_total`.
"""

class Carro:
    total_carros = 0

    def __init__(self, modelo=None, cor=None, ano=None, preco=None):
        self.modelo = modelo
        self.cor = cor
        self.ano = ano
        self.preco = preco
        self.__class__.total_carros += 1

    def get_cor(self):
        return str(self.cor)

    def get_ano(self):
        return str(self.ano)
    
    def get_modelo(self):
        return str(self.modelo)  

    def set_modelo(self, modelo):
        if type(modelo) is str:
            self.modelo = modelo

    def imprimir_carro(self):
        print('Modelo: ' + self.get_modelo())
        print('Cor: ' + self.get_cor())
        print('Ano: ' + self.get_ano())

    @classmethod
    def imprimir_total(cls):
        print('Total de carros = ' + str(cls.total_carros))

c1 = Carro(modelo='Fusca', ano=1988)
c1.set_modelo('Gol')

c2 = Carro()
c3 = Carro()
c4 = Carro()

c1.imprimir_carro()

Carro.imprimir_total()

